import re
import sys
from textwrap import wrap

shuffle = (
    (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,),
    (0, 30, 1, 31, 2, 32, 3, 33, 4, 34, 5, 35, 6, 36, 7, 37, 8, 38, 9, 39, 10, 40, 11, 41, 12, 42, 13, 43, 14, 44, 15, 45, 16, 46, 17, 47, 18, 48, 19, 49, 20, 50, 21, 51, 22, 52, 23, 53, 24, 54, 25, 55, 26, 56, 27, 57, 28, 58, 29, 59,),
    (0, 20, 40, 1, 21, 41, 2, 22, 42, 3, 23, 43, 4, 24, 44, 5, 25, 45, 6, 26, 46, 7, 27, 47, 8, 28, 48, 9, 29, 49, 10, 30, 50, 11, 31, 51, 12, 32, 52, 13, 33, 53, 14, 34, 54, 15, 35, 55, 16, 36, 56, 17, 37, 57, 18, 38, 58, 19, 39, 59,),
    (0, 12, 24, 36, 48, 1, 13, 25, 37, 49, 2, 14, 26, 38, 50, 3, 15, 27, 39, 51, 4, 16, 28, 40, 52, 5, 17, 29, 41, 53, 6, 18, 30, 42, 54, 7, 19, 31, 43, 55, 8, 20, 32, 44, 56, 9, 21, 33, 45, 57, 10, 22, 34, 46, 58, 11, 23, 35, 47, 59,),
    (0, 9, 18, 27, 36, 44, 52, 1, 10, 19, 28, 37, 45, 53, 2, 11, 20, 29, 38, 46, 54, 3, 12, 21, 30, 39, 47, 55, 4, 13, 22, 31, 40, 48, 56, 5, 14, 23, 32, 41, 49, 57, 6, 15, 24, 33, 42, 50, 58, 7, 16, 25, 34, 43, 51, 59, 8, 17, 26, 35,),
    (0, 7, 14, 21, 28, 35, 42, 48, 54, 1, 8, 15, 22, 29, 36, 43, 49, 55, 2, 9, 16, 23, 30, 37, 44, 50, 56, 3, 10, 17, 24, 31, 38, 45, 51, 57, 4, 11, 18, 25, 32, 39, 46, 52, 58, 5, 12, 19, 26, 33, 40, 47, 53, 59, 6, 13, 20, 27, 34, 41,),
    (0, 6, 12, 18, 24, 30, 35, 40, 45, 50, 55, 1, 7, 13, 19, 25, 31, 36, 41, 46, 51, 56, 2, 8, 14, 20, 26, 32, 37, 42, 47, 52, 57, 3, 9, 15, 21, 27, 33, 38, 43, 48, 53, 58, 4, 10, 16, 22, 28, 34, 39, 44, 49, 54, 59, 5, 11, 17, 23, 29,),
    (0, 5, 10, 15, 20, 25, 30, 35, 40, 44, 48, 52, 56, 1, 6, 11, 16, 21, 26, 31, 36, 41, 45, 49, 53, 57, 2, 7, 12, 17, 22, 27, 32, 37, 42, 46, 50, 54, 58, 3, 8, 13, 18, 23, 28, 33, 38, 43, 47, 51, 55, 59, 4, 9, 14, 19, 24, 29, 34, 39,),
    (0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 39, 42, 45, 48, 51, 54, 57, 1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 40, 43, 46, 49, 52, 55, 58, 2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 41, 44, 47, 50, 53, 56, 59, 3, 7, 11, 15, 19, 23, 27, 31, 35,),
    (0, 4, 8, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 1, 5, 9, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 2, 6, 10, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 3, 7, 11,),
    (0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 59, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57,),
    (0, 3, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 1, 4, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 2, 5,),
    (0, 3, 6, 9, 12, 15, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 1, 4, 7, 10, 13, 16, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 2, 5, 8, 11, 14, 17,),
    (0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 44, 46, 48, 50, 52, 54, 56, 58, 1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 45, 47, 49, 51, 53, 55, 57, 59, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41,),
    (0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41,),
    (0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45,),
)

negate = (
    "878F0B496878F0B0",
    "9607CF2B59607CF0",
    "A59E03CD2A59E030",
    "B416C7AF1B416C70",
    "C3AD1A41EC3AD1B0",
    "D225DE23DD225DF0",
    "E1BC12C5AE1BC130",
    "F034D6A79F034D70",
    "F0B496878F0B4970",
    "E13C52E5BE13C530",
    "A59E03CD2A59E030",
    "B416C7AF1B416C70",
    "C32D5A61FC32D5B0",
    "D2A59E03CD2A59F0",
    "878F0B496878F0B0",
    "9607CF2B59607CF0",
)


def check_digit(row):
    checksum        = 0
    weight          = 3
    obfuscation_set = {
         0: "0",
         1: "1",
         2: "2",
         3: "3",
         4: "4",
         5: "5",
         6: "6",
         7: "7",
         8: "8",
         9: "9",
        10: "D",
        11: "C",
        12: "B",
        13: "A",
        14: "F",
        15: "E",
    }
    hexed = format(int(row, 2), "015X")

    for it in hexed:
        checksum += int(it, 16) * weight
        weight    = 4 - weight

    for it in obfuscation_set.keys():
        if (checksum + it) % 16 == 0:
            return obfuscation_set[it]


def obfuscate(row):
    check    = check_digit(row)
    index    = int(check, 16)
    bits_xor = [None] * 60

    for i in range(60):
        bits_xor[shuffle[index][i]] = row[i]

    check = format(
        int(
            check.translate(
                check.maketrans("76543210EFABCD98", "0123456789ABCDEF")
            ),
            16
        ),
        "04b"
    )

    he_xor         = format(int("".join(bits_xor) + check, 2), "016X")
    bytes_xor      = bytes.fromhex(he_xor)
    bytes_negate   = bytes.fromhex(negate[index])
    bytes_barcode  = bytes([b1 ^ b2 for b1, b2 in zip(bytes_xor, bytes_negate)])
    obfuscated_row = bytes_barcode.hex().upper()

    return obfuscated_row.translate(
        obfuscated_row.maketrans("0123456789ABCDEF", "76543210EFABCD98")
    )


def to_unicode(encoded_data):
    unicode_data = ""
    wrapper = wrap(encoded_data, 113)

    for x in reversed(range(len(wrapper))):
        unicode_data += wrapper[x].replace("0", " ").replace("1", "â–ˆ") + "\n"

    return unicode_data


def get_barcode(obfuscated_data):
    bar_pattern = {
        "0": "1110010",
        "1": "1100110",
        "2": "1101100",
        "3": "1000010",
        "4": "1011100",
        "5": "1001110",
        "6": "1010000",
        "7": "1000100",
        "8": "1001000",
        "9": "1110100",
        "A": "1011000",
        "B": "1001100",
        "C": "1100100",
        "D": "1101000",
        "E": "1100010",
        "F": "1000110",
    }
    encoded_data = ""

    for row in re.split(r"\s", obfuscated_data):
        for c in row:
            encoded_data += bar_pattern[c]
        encoded_data += "1"

    return to_unicode(encoded_data)


if len(sys.argv) < 2:
    print("Usage: python pv_encoder.py <input_file> [-debug]\n")
    sys.exit(2)

input_file = sys.argv[1]
debug_mode = "-debug" in sys.argv

try:
    with open(input_file, "r") as file:
        for line in file:
            pinata_card = re.split("\t", line.strip())
            barcode     = pinata_card[0]
            filename    = pinata_card[1]

            decoded_data = ""

            for row in re.split(r"\s", barcode):
                decoded_data += obfuscate(row) + " "

            if debug_mode:
                print(f"{get_barcode(decoded_data[0:-1])}\t{filename}")
            else:
                print(f"{decoded_data[0:-1]}\t{filename}")
except FileNotFoundError:
    print("Error: \033[91m" + input_file + " not found\033[0m\n")
    sys.exit(1)
except Exception as e:
    print("Error: \033[91m" + str(e) + "\033[0m\n")
    sys.exit(1)
